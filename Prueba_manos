import cv2
import mediapipe as mp
import numpy as np

# Inicializamos los módulos de MediaPipe
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=2,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5
)
    
def detect_hand_gesture(frame):
    # Convertir BGR a RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Procesar el frame para detectar manos
    results = hands.process(frame_rgb)
    
    # Dibujar las marcas de las manos si se detectan
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Dibujar los puntos de referencia
            mp_drawing.draw_landmarks(
                frame,
                hand_landmarks,
                mp_hands.HAND_CONNECTIONS
            )
            
            # Obtener coordenadas de puntos clave
            thumb_tip = hand_landmarks.landmark[4]  # Pulgar
            index_tip = hand_landmarks.landmark[8]  # Índice
            
            # Calcular distancia entre pulgar e índice
            distance = np.sqrt(
                (thumb_tip.x - index_tip.x)**2 + 
                (thumb_tip.y - index_tip.y)**2
            )
            
            # Ejemplo simple de detección de gesto
            if distance < 0.1:  # Si los dedos están cerca
                cv2.putText(frame, "Dedos Juntos", (10, 50), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            else:
                cv2.putText(frame, "Dedos Separados", (10, 50), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    
    return frame

# Iniciar la captura de video
cap = cv2.VideoCapture(0)

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break
        
    # Procesar el frame
    frame = detect_hand_gesture(frame)
    
    # Mostrar el resultado
    cv2.imshow('Hand Gesture Detection', frame)
    
    # Salir con la tecla 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Liberar recursos
cap.release()
cv2.destroyAllWindows()
hands.close()
